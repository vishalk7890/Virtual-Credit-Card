{{define "stripe-js"}}
<script src="https://js.stripe.com/v3/"></script>

<script>
    let card;
    let stripe;
    const cardMessages = document.getElementById("card-messages");
    const payButton = document.getElementById("pay-button");
    const processing = document.getElementById("processing-payment");

    stripe = Stripe({{.StripePublishableKey}});

    function hidePayButton() {
        payButton.classList.add("d-none");
        processing.classList.remove("d-none");
    }

    function showPayButtons() {
        payButton.classList.remove("d-none");
        processing.classList.add("d-none");
    }

    function showCardError(msg) {
        cardMessages.classList.add("alert-danger");
        cardMessages.classList.remove("alert-success");
        cardMessages.classList.remove("d-none");
        cardMessages.innerText = msg;
    }

    function showCardSuccess() {
        cardMessages.classList.remove("alert-danger");
        cardMessages.classList.add("alert-success");
        cardMessages.classList.remove("d-none");
        cardMessages.innerText = "Transaction successful";
    }

    function val() {
        let form = document.getElementById("charge_form");
        if (form.checkValidity() === false) {
            this.event.preventDefault();
            this.event.stopPropagation();
            form.classList.add("was-validated");
            return;
        }
        form.classList.add("was-validated");
        hidePayButton();

        let amountToCharge = document.getElementById("amount").value;
        
        let payload = {
            amount: amountToCharge,
            currency: 'cad',
        }

        amount: amountToCharge,
currency: 'cad',
}

const requestOptions = {
    method: 'post',
    headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
    },
    body: JSON.stringify(payload),
}

fetch("http://localhost:4001/api/payment-intent", requestOptions)
    .then(response => response.text())
    .then(response => {
        let data;
        try {
            data = JSON.parse(response);
            stripe.confirmCardPayment(data.client_secret, {
                payment_method: {
                    card: card,
                    billing_details: {
                        name: document.getElementById("cardholder-name").value,
                    }
                }
            }).then(function(result) {
                if (result.error) {
                    // Show error to your customer (e.g., insufficient funds)
                    console.error(result.error.message);
                } else {
                    // The payment has been processed!
                    if (result.paymentIntent.status === 'succeeded') {
                        console.log('Payment succeeded!');
                    } else if (result.paymentIntent.status === 'requires_action' || result.paymentIntent.status === 'requires_confirmation') {
                        // Handle additional authentication (e.g., 3D Secure)
                        stripe.confirmCardPayment(data.client_secret);
                    } else {
                        console.log('Payment status:', result.paymentIntent.status);
                    }
                }
            });
        } catch (error) {
            console.error('Error parsing response:', error);
        }
    })
    .catch(error => {
        console.error('Error making request:', error);
    });

    (function() {
        // create stripe & elements
        const elements = stripe.elements();
        const style = {
            base: {
                fontSize: '16px',
                lineHeight: '24px'
            }
        };

        // create card entry
        card = elements.create('card', {
            style: style,
            hidePostalCode: true,
        });
        card.mount("#card-element");

        // check for input errors
        card.addEventListener('change', function(event) {
            var displayError = document.getElementById("card-errors");
            if (event.error) {
                displayError.classList.remove('d-none');
                displayError.textContent = event.error.message;
            } else {
                displayError.classList.add('d-none');
                displayError.textContent = '';
            }
        });
    })();
</script>

{{end}}